#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (C) Copyright RÃ©volution Linux 2012
#
# Authors:
# Vincent Vinet <vince.vinet@gmail.com>
#
# This file is part of tilde.
#
# tilde is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# tilde is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with tilde.  If not, see <http://www.gnu.org/licenses/>.

import logging
import optparse
import pdb

from twisted.internet import reactor, task

from tilde import runner, loader


opt = optparse.OptionParser()
opt.set_default("loglevel", logging.WARN)
opt.add_option("-c", "--config", dest="cfgfile", default="/etc/tilde/tilde.ini")

opt.add_option("-v", action="store_const", dest="loglevel",
               const=logging.INFO, help="verbose output")
opt.add_option("-d", action="store_const", dest="loglevel",
               const=logging.DEBUG, help="debug output")
opt.add_option("-q", action="store_const", dest="loglevel",
               const=logging.ERROR, help="quiet")

opt.add_option("-i", type=int, dest="interval", default=0,
              help="Run every INTERVAL seconds")
opt.add_option("--pdb", action="store_true", dest="pdb")


opts, args = opt.parse_args()
logging.basicConfig(level=opts.loglevel)
from twisted.python import log
obs = log.PythonLoggingObserver()
obs.start()

def handle_interrupt(f):
    f.trap(KeyboardInterrupt)
    logging.info("Interrupted")

def fail_miserably(f):
    logging.error("Failed with error: %s", f.value)
    reactor.stop()

def done(result=None):
    reactor.stop()

def debug(f):
    pdb.post_mortem(f.getTracebackObject())
    raise f

def make_a_run(reactor, err=None):
    cfg = task.deferLater(reactor, 0, loader.load_config, opts.cfgfile)
    cfg.addCallback(loader.setup_environment)
    cfg.addCallback(runner.run, reactor)
    if opts.pdb:
        cfg.addErrback(debug)
    if err:
        cfg.addErrback(err)
    return cfg

if not opts.interval:
    run = make_a_run(reactor)
else:
    def log_and_continue(err):
        logging.error("Failed with error: %s", err.value)
    loop = task.LoopingCall(make_a_run, reactor, log_and_continue)
    run = loop.start(opts.interval)

run.addErrback(handle_interrupt)
run.addCallbacks(done, fail_miserably)

reactor.run()
